<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>因子 on Blog</title>
    <link>http://localhost:1313/blog/tags/%E5%9B%A0%E5%AD%90/</link>
    <description>Recent content in 因子 on Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 Aug 2024 00:25:16 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/tags/%E5%9B%A0%E5%AD%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>因子投资慢读计划</title>
      <link>http://localhost:1313/blog/posts/factor_invest/</link>
      <pubDate>Wed, 28 Aug 2024 00:25:16 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/factor_invest/</guid>
      <description>原书pdf: 《因子投资 方法与实践》&#xA;回归检验 时间序列回归 对某只股票 $i$&#xA;$$&#xD;R_{it}^e=\alpha_i+\beta_i^T\lambda_t+\epsilon_t, \quad t=1,2,\cdots,T&#xD;$$&#xA;时序回归：首先固定$i$，以这只股票在不同时间上的数据为样本，做OLS回归，得到属于这只股票的$\beta_i^T,\alpha_i,\epsilon_i$。&#xA;这是一张散点图，横轴是用时序回归估计出来的 $\hat{\beta}_i$ ，纵轴是通过公式 $E_t[R_{it}^e]=\hat{\alpha}_i+\hat{\beta}_iE_t[\lambda_t]$ 估计出来的预期收益率。因此，这张图不是最小化 $\alpha_i$ 的结果。&#xA;既然我们已经估计出 $\alpha_i$，下面要检验其是否联合为零。常用的方法是GRS检验。</description>
    </item>
    <item>
      <title>基于JoinQuant的因子回测框架</title>
      <link>http://localhost:1313/blog/posts/factor_framework/</link>
      <pubDate>Sun, 25 Aug 2024 12:07:27 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/factor_framework/</guid>
      <description>from jqfactor import get_factor_values, neutralize, winsorize_med, standardlize from jqfactor import Factor, calc_factors import datetime import pandas as pd import numpy as np import matplotlib.pyplot as plt import statsmodels.api as sm from scipy.stats import spearmanr,pearsonr import matplotlib.pyplot as plt import matplotlib.dates as mdates import copy import time plt.rcParams[&amp;#39;font.sans-serif&amp;#39;] = [&amp;#39;SimHei&amp;#39;] # 用来正常显示中文标签 plt.rcParams[&amp;#39;axes.unicode_minus&amp;#39;] = False # 用来正常显示负号 获取数据 获取交易日 输入：start_date（起始日期），end_date（终止日期），freq（频率），count（None）&#xA;# 1.1-获取交易日 def get_calendar(start_date=None, end_date=None, freq=&amp;#39;D&amp;#39;, count=None): &amp;#34;&amp;#34;&amp;#34; params: start_date(Timestamp)：起始日期，年月日 end_date(Timestamp)：终止日期，年月日 freq(str)：交易日频率，默认每天 - &amp;#39;W&amp;#39;: 每周 - &amp;#39;M&amp;#39;: 每月 - &amp;#39;Q&amp;#39;: 每季度 - &amp;#39;Y&amp;#39;: 每年 count(int)：获取终止日期前交易日数量 return: df.</description>
    </item>
  </channel>
</rss>
