<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Git on Blog</title>
    <link>http://localhost:1313/blog/tags/git/</link>
    <description>Recent content in Git on Blog</description>
    <generator>Hugo -- 0.133.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 31 Aug 2024 11:09:42 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用SSH密钥进行身份验证</title>
      <link>http://localhost:1313/blog/articles/set_ssh/</link>
      <pubDate>Sat, 31 Aug 2024 11:09:42 +0800</pubDate>
      <guid>http://localhost:1313/blog/articles/set_ssh/</guid>
      <description>SSH（Secure Shell）公钥是用于在网络通信中实现安全身份验证的一种加密方式。
SSH原理 非对称加密：SSH公钥认证使用非对称加密技术，这种技术涉及一对密钥：公钥和私钥。
公钥（Public Key）：可以公开发布，任何人都可以获取。 私钥（Private Key）：必须严格保密，只能由密钥的拥有者持有。 加密与解密：
加密：公钥用于加密数据。由于公钥是公开的，任何人都可以使用它加密信息。 解密：只有对应的私钥可以解密由公钥加密的信息。这确保了只有密钥的拥有者（持有私钥的人）才能读取加密内容。 身份验证过程：
生成密钥对：用户首先在本地设备上生成一对公钥和私钥。 上传公钥：用户将公钥上传到需要访问的远程服务器（如GitHub、远程Linux服务器）。 私钥保密：私钥保存在用户的本地设备上，不与任何人共享。 连接与认证：
当用户尝试通过SSH连接到远程服务器时，服务器会生成一个随机数并使用用户的公钥对其加密，然后将加密后的数据发送给用户。 用户的SSH客户端使用本地的私钥解密服务器发送的加密数据。 如果解密成功，用户客户端将解密结果发回给服务器。 服务器验证解密结果是否正确，以确认用户持有相应的私钥。如果正确，身份验证通过。 确保安全：
安全性：由于私钥从不在网络上传输，攻击者无法通过截获通信数据来获取私钥。 防篡改：即使攻击者获取了公钥，无法伪装成合法用户，因为他们没有对应的私钥。 优势：
高安全性：相比传统的用户名/密码认证，SSH公钥认证更加安全，因为私钥不会在网络上传输，并且密钥对是独一无二的。 无密码登录：SSH公钥认证允许无密码的自动化登录，便于脚本、自动化工具和日常运维。 管理便捷：可以为每个设备或用户设置不同的公钥，并且可以随时管理和撤销。 如何设置SSH 生成SSH密钥 打开终端并输入以下命令来生成新的SSH密钥：
ssh-keygen -t ed25519 -C &amp;#34;your_email@example.com&amp;#34; 当系统提示时，按回车键以接受默认的文件路径（通常是 ~/.ssh/id_ed25519）。
接着，系统会要求你设置一个密码短语。你可以选择设置，也可以直接按回车跳过。
添加SSH密钥到SSH代理 启动SSH代理：
eval &amp;#34;$(ssh-agent -s)&amp;#34; 将生成的SSH密钥添加到SSH代理中：
ssh-add ~/.ssh/id_ed25519 将SSH密钥添加到GitHub 查看你的SSH公钥：
cat ~/.ssh/id_ed25519.pub 然后复制输出的内容。 SSH公钥的格式通常是一个单行的文本字符串，包含了三部分内容：加密类型、加密公钥数据和注释（通常是你的邮箱地址）。以下是一个典型的SSH公钥格式示例：
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG8sVpP8h65X8+8Km6BtJQG9d8gY6J7sZ+TpJQeV9XZT your_email@example.com 登录GitHub，前往 Settings -&amp;gt; SSH and GPG keys -&amp;gt; New SSH key。
在 &amp;ldquo;Title&amp;rdquo; 中输入一个名称（如 &amp;ldquo;My Computer&amp;rdquo;），并将复制的SSH公钥粘贴到 &amp;ldquo;Key&amp;rdquo; 字段中，最后点击 Add SSH key。</description>
    </item>
    <item>
      <title>15分钟用Hugo&#43;Github Pages搭建博客</title>
      <link>http://localhost:1313/blog/posts/demo/</link>
      <pubDate>Sat, 24 Aug 2024 21:15:11 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/demo/</guid>
      <description>假定你的电脑已安装好Hugo，本文档可以逐行跑通，是从零开始搭建Hugo博客的简易指南
本地搭建Hugo博客 hugo new site theplaybook --format yaml cd theplaybook 用hugo new site [博客文件夹名称]指令在当前目录下新建一个Hugo模版。--format [配置文件格式]可选的格式有yaml, toml（默认toml）
hugo new docs/test.md git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 git init git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod hugo new docs/test.md会在/content/docs下新建一个md文件test.md
随后用git导入主题PaperMod，这两句足够完成配置，更多信息见Hugo PaperMod
vim hugo.yaml 按&amp;quot;I&amp;quot;(Insert)开始编辑，删除baseURL的内容，并在最后一行下面添加
theme: PaperMod 按Esc再输入:wq保存并退出编辑
至此Hugo博客在本地的搭建已经完成，运行hugo server指令并在网址栏输入localhost:1313就可以在本地看到博客的界面
将Hugo部署到Github Pages GitHub Pages可用于免费托管静态网站，并且会分配一个像样的域名，比购买国内服务器和域名并备案要经济得多
首先在创建一个GitHub账号，新建一个仓库theplaybook-demo，保持默认配置项即可（Public仓库+不添加README）
步骤1: 在终端运行仓库主页代码
echo &amp;#34;# theplaybook-demo&amp;#34; &amp;gt;&amp;gt; README.md git add README.md git commit -m &amp;#34;first commit&amp;#34; git branch -M main git remote add origin https://github.</description>
    </item>
  </channel>
</rss>
