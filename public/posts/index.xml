<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>http://localhost:1313/blog/posts/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 Aug 2024 00:25:16 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>因子投资慢读计划</title>
      <link>http://localhost:1313/blog/posts/factor_invest/</link>
      <pubDate>Wed, 28 Aug 2024 00:25:16 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/factor_invest/</guid>
      <description>原书pdf: 《因子投资 方法与实践》&#xA;回归检验 时间序列回归 对某只股票 $i$&#xA;$$&#xD;R_{it}^e=\alpha_i+\beta_i^T\lambda_t+\epsilon_t, \quad t=1,2,\cdots,T&#xD;$$&#xA;时序回归：首先固定$i$，以这只股票在不同时间上的数据为样本，做OLS回归，得到属于这只股票的$\beta_i^T,\alpha_i,\epsilon_i$。&#xA;这是一张散点图，横轴是用时序回归估计出来的 $\hat{\beta}_i$ ，纵轴是通过公式 $E_t[R_{it}^e]=\hat{\alpha}_i+\hat{\beta}_iE_t[\lambda_t]$ 估计出来的预期收益率。因此，这张图不是最小化 $\alpha_i$ 的结果。&#xA;既然我们已经估计出 $\alpha_i$，下面要检验其是否联合为零。常用的方法是GRS检验。</description>
    </item>
    <item>
      <title>基于JoinQuant的因子回测框架</title>
      <link>http://localhost:1313/blog/posts/factor_framework/</link>
      <pubDate>Sun, 25 Aug 2024 12:07:27 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/factor_framework/</guid>
      <description>from jqfactor import get_factor_values, neutralize, winsorize_med, standardlize from jqfactor import Factor, calc_factors import datetime import pandas as pd import numpy as np import matplotlib.pyplot as plt import statsmodels.api as sm from scipy.stats import spearmanr,pearsonr import matplotlib.pyplot as plt import matplotlib.dates as mdates import copy import time plt.rcParams[&amp;#39;font.sans-serif&amp;#39;] = [&amp;#39;SimHei&amp;#39;] # 用来正常显示中文标签 plt.rcParams[&amp;#39;axes.unicode_minus&amp;#39;] = False # 用来正常显示负号 获取数据 获取交易日 输入：start_date（起始日期），end_date（终止日期），freq（频率），count（None）&#xA;# 1.1-获取交易日 def get_calendar(start_date=None, end_date=None, freq=&amp;#39;D&amp;#39;, count=None): &amp;#34;&amp;#34;&amp;#34; params: start_date(Timestamp)：起始日期，年月日 end_date(Timestamp)：终止日期，年月日 freq(str)：交易日频率，默认每天 - &amp;#39;W&amp;#39;: 每周 - &amp;#39;M&amp;#39;: 每月 - &amp;#39;Q&amp;#39;: 每季度 - &amp;#39;Y&amp;#39;: 每年 count(int)：获取终止日期前交易日数量 return: df.</description>
    </item>
    <item>
      <title>15分钟用Hugo&#43;Github Pages搭建博客</title>
      <link>http://localhost:1313/blog/posts/demo/</link>
      <pubDate>Sat, 24 Aug 2024 21:15:11 +0800</pubDate>
      <guid>http://localhost:1313/blog/posts/demo/</guid>
      <description>假定你的电脑已安装好Hugo，本文档可以逐行跑通，是从零开始搭建Hugo博客的简易指南&#xA;本地搭建Hugo博客 hugo new site theplaybook --format yaml cd theplaybook 用hugo new site [博客文件夹名称]指令在当前目录下新建一个Hugo模版。--format [配置文件格式]可选的格式有yaml, toml（默认toml）&#xA;hugo new docs/test.md git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 git init git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod hugo new docs/test.md会在/content/docs下新建一个md文件test.md&#xA;随后用git导入主题PaperMod，这两句足够完成配置，更多信息见Hugo PaperMod&#xA;vim hugo.yaml 按&amp;quot;I&amp;quot;(Insert)开始编辑，删除baseURL的内容，并在最后一行下面添加&#xA;theme: PaperMod 按Esc再输入:wq保存并退出编辑&#xA;至此Hugo博客在本地的搭建已经完成，运行hugo server指令并在网址栏输入localhost:1313就可以在本地看到博客的界面&#xA;将Hugo部署到Github Pages GitHub Pages可用于免费托管静态网站，并且会分配一个像样的域名，比购买国内服务器和域名并备案要经济得多&#xA;首先在创建一个GitHub账号，新建一个仓库theplaybook-demo，保持默认配置项即可（Public仓库+不添加README）&#xA;步骤1: 在终端运行仓库主页代码&#xA;echo &amp;#34;# theplaybook-demo&amp;#34; &amp;gt;&amp;gt; README.md git add README.md git commit -m &amp;#34;first commit&amp;#34; git branch -M main git remote add origin https://github.</description>
    </item>
  </channel>
</rss>
